---
format: pdf
lang: pt
geometry: 
  - left=1.25in
  - right=1.25in
  - top=1in
  - bottom=1in
fig-cap-location: top
echo: false
warning: false
bibliography: referencias.bib
---

::: hidden
\pagestyle{empty}
\thispagestyle{empty}
:::

![](%22ufpb.png%22){height="100" fig-align="center"}

\begin{center}
UNIVERSIDADE FEDERAL DA PARA√çBA

CENTRO DE CI√äNCIAS EXATAS E DA NATUREZA

DEPARTAMENTO DE ESTAT√çSTICA

DISCIPLINA: INTRODU√á√ÉO AOS SOFTWARES ESTAT√çSTICOS
\end{center}

\vfill

\begin{center}
\Large{Fluxo de Trabalho: Integrando Git, GitHub e Quarto com Introdu√ß√£o √† Programa√ß√£o em Python}
\end{center}

\vfill


\begin{center}
Aila Soares Ferreira \\
matr√≠cula: 20240045022
\end{center}



\vfill

\begin{center}
Jo√£o Pessoa - PB

Julho 2025
\end{center}

\newpage



## 1.0 INTRODU√á√ÉO


Com os avan√ßos do *Big Data* - termo que descreve grandes volumes de dados de alta velocidade, complexos e vari√°veis, que passaram a exigir t√©cnicas avan√ßadas para captura, armazenamento, distribui√ß√£o, gerenciamento e an√°lise de informa√ß√µes [@techamerica2012] - observamos que o valor desses dados s√≥ √© plenamente aproveitado quando utilizado para tomada de decis√µes estrat√©gicas. Para isso, as organiza√ß√µes precisam de processos eficientes que transformem dados brutos, muitas vezes dispersos e din√¢micos, em *insights* significativos [@gandomi2015].

Al√©m disso, conforme um projeto avan√ßa, arquivos s√£o constantemente modificados e compartilhados entre colaboradores, exigindo gest√£o adequada para garantir integridade e acessibilidade. O gerenciamento de dados envolve n√£o apenas armazenamento, mas tamb√©m prepara√ß√£o e recupera√ß√£o eficiente para an√°lise [@bryan2017].

Nesse contexto, este trabalho foi desenvolvido como requisito da disciplina, Introdu√ß√£o aos Softwares Estat√≠sticos, com o objetivo de integrar ferramentas fundamentais para a pr√°tica atual da estat√≠stica, como:

1. **Git e GitHub** - Sistema de controle de vers√µes distribu√≠do e plataforma de hospedagem
2. **Quarto** - Ferramenta para cria√ß√£o de relat√≥rios din√¢micos e reprodut√≠veis
3. **Python** - Linguagem de programa√ß√£o para an√°lise de dados

## 2.0 Controle de Vers√£o

Antes de falarmos sobre Git e GitHub, precisamos entender o conceito de **controle de vers√£o**. Esse sistema registra todas as mudan√ßas em arquivos ao longo do tempo, permitindo que voc√™ volte a vers√µes anteriores quando necess√°rio. Ele guarda todo o hist√≥rico de altera√ß√µes em um banco de dados. Se acontecer algum erro, √© poss√≠vel voltar atr√°s e comparar diferentes vers√µes do projeto [@bryan2020].

### 2.2 Benef√≠cios do Controle de Vers√£o

Os principais benef√≠cios s√£o:

1. **Hist√≥rico completo** de todas as mudan√ßas:
   - Todas as altera√ß√µes feitas por diferentes pessoas
   - Cria√ß√£o e exclus√£o de arquivos
   - Mudan√ßas no conte√∫do

2. **Ramifica√ß√£o (branching) e jun√ß√£o (merging)**:
   - Trabalhar em partes separadas do projeto
   - Criar "ramos" para desenvolver coisas novas
   - Juntar tudo depois no projeto principal

3. **Rastreamento**:
   - Saber quem fez cada mudan√ßa
   - Quando e por que foi feita
   - Comparar vers√µes diferentes

Os sistemas de controle de vers√£o passaram por significativas melhorias nas √∫ltimas d√©cadas. Dentre as solu√ß√µes atualmente dispon√≠veis, o Git se consolida como uma das ferramentas mais adotadas para controle de vers√£o [@chacon2014; @bryan2020].


## 3.0 Git e GitHub

O Git √© um sistema de controle de vers√£o distribu√≠do, criado por Linus Torvalds em 2005 com o objetivo de gerenciar o desenvolvimento colaborativo do kernel do Linux. Sua arquitetura permite que m√∫ltiplos desenvolvedores trabalhem simultaneamente em um projeto, mantendo um hist√≥rico completo e seguro das altera√ß√µes realizadas.

Com o passar dos anos, o Git passou a ser amplamente adotado em diferentes √°reas, incluindo a ci√™ncia de dados, onde tem se mostrado uma ferramenta eficiente no gerenciamento de projetos complexos. Esses projetos frequentemente envolvem uma cole√ß√£o heterog√™nea de arquivos, como scripts de an√°lise computacional, relat√≥rios din√¢micos, bases de dados e visualiza√ß√µes gr√°ficas [@bryan2017] [@chacon2014].

### 3.1 Fluxo de Trabalho B√°sico do Git

O fluxo de trabalho b√°sico com Git pode ser resumido nas seguintes etapas:

1. **Modifica√ß√£o**  
   ‚ó¶ Edi√ß√£o de arquivos na √°rvore de trabalho  
   ‚ó¶ Cria√ß√£o, remo√ß√£o ou altera√ß√£o de documentos  

2. **Prepara√ß√£o**  
   ‚ó¶ Sele√ß√£o das mudan√ßas que devem ser inclu√≠das no pr√≥ximo commit (`git add`)  
   ‚ó¶ Organiza√ß√£o l√≥gica das altera√ß√µes  

3. **Consolida√ß√£o**  
   ‚ó¶ Registro definitivo das mudan√ßas com uma mensagem descritiva (`git commit`)  
   ‚ó¶ Cria√ß√£o de pontos de restaura√ß√£o no hist√≥rico do projeto  

4. **Sincroniza√ß√£o**  
   ‚ó¶ Integra√ß√£o com reposit√≥rios remotos por meio dos comandos `git push` e `git pull`  
   ‚ó¶ Garantia de que todas as vers√µes do projeto permane√ßam consistentes entre os colaboradores  

### 3.2 GitHub

O GitHub √© uma plataforma de hospedagem de c√≥digo-fonte que complementa o uso do Git, fornecendo uma interface gr√°fica baseada na web e recursos avan√ßados para o gerenciamento de reposit√≥rios Git. Enquanto o Git √© uma ferramenta local utilizada para registrar e controlar as altera√ß√µes em arquivos, o GitHub funciona como um servi√ßo remoto, permitindo que esses reposit√≥rios sejam armazenados, sincronizados e compartilhados pela internet.

Muitas opera√ß√µes podem ser feitas inteiramente no Github, como exemplo: **Visualizar e editar arquivos; revisar e gerenciar solicita√ß√µes de mudan√ßas; e Controlar permiss√µes de acesso aos projetos**.

## 3.3 Comandos b√°sicos: `git init`, `git add`, `git clone`,  `git commit`, `git push`, `git pull`

### 3.3.1 `git init`

O comando `git init` cria um novo reposit√≥rio do Git. Ele √© utilizado para transformar uma pasta comum do computador em um reposit√≥rio Git, ou seja, um ambiente com controle de vers√£o. Isso permite acompanhar todas as altera√ß√µes feitas no projeto ao longo do tempo.

A seguir, apresentamos um exemplo pr√°tico com base no desenvolvimento deste pr√≥prio relat√≥rio.

### Exemplo pr√°tico: iniciando o Git em um projeto Quarto

*Etapas*

1. No Positron criar uma nova pasta

2. Dentro da pasta, criar um novo arquivo chamado `relatorio2.qmd`.

3. A seguir, abri o terminal navegar na pasta do projeto com o comando *c*

**Transformando em reposit√≥rio Git**

No terminal, execute os seguintes comandos:
``` python
git init #Comando para iniciar reposit√≥rio
git status #Comando para verificar o status dos arquivo
```
### 3.3.2 `git add`
O comando `git add` prepara arquivos para serem inclu√≠dos no pr√≥ximo *commit*. Ou seja, ele diz ao Git quais arquivos voc√™ quer salvar no hist√≥rico de vers√µes. Voc√™ deve usar sempre que, criar um arquivo, modificar ou deletar algum arquivo.

**Usando o git add**

No terminal, execute os seguintes comandos:
``` python
git add . # Adicionar todos os arquivos modificados. 
          # O ponto . significa  ‚Äútudo no diret√≥rio atual e subpastas"
git add relatorio2.qmd #Adicionar um arquivo espec√≠fico
```

Depois de adicionar, os arquivos ficam em um estado chamado **"staged"** (preparado). Eles s√≥ ser√£o salvos de verdade no Git quando voc√™ fizer o commit:
`git commit -m` "mensagem explicando a mudan√ßa".

### 3.3.3 `git clone` 
O comando `git clone` √© usado para copiar um reposit√≥rio Git existente para o seu computador. Ele cria uma c√≥pia completa do projeto, incluindo todos os arquivos, hist√≥rico de vers√µes e estrutura de diret√≥rios.
Voc√™ pode clonar reposit√≥rios que estejam hospedados localmente ou em servidores remotos, como o GitHub. Esse comando √© geralmente o primeiro passo para come√ßar a colaborar em um projeto existente.

**Usando o git clone**

No terminal, execute o seguinte comando:
``` python
git clone https://github.com/usuario/nome-do-repositorio.git
```
üëâEsse comando ir√° criar uma pasta chamada nome-do-repositorio com todos os arquivos e hist√≥rico do reposit√≥rio remoto.

### 3.3.4 `git commit` 
O comando `git commit`  registra um instant√¢neo das altera√ß√µes preparadas no projeto. Esse instant√¢neo representa uma vers√£o segura do projeto naquele momento, que ser√° armazenada no hist√≥rico do reposit√≥rio. 

Antes de executar o `git commit`, √© necess√°rio utilizar o comando `git add`, que serve para selecionar as altera√ß√µes que ser√£o inclu√≠das nesse instant√¢neo. Assim, `git add` prepara os arquivos, e `git commit` os salva definitivamente no reposit√≥rio local.

Al√©m disso, o comando `git status` pode ser usado a qualquer momento para verificar quais arquivos foram modificados, quais j√° foram preparados com `git add`  e quais ainda n√£o foram inclu√≠dos no pr√≥ximo commit.

Esses tr√™s comandos ‚Äî `git add`, `git status` e `git commit` ‚Äî s√£o frequentemente utilizados em conjunto e formam o fluxo b√°sico de trabalho com Git, permitindo um controle eficiente sobre a evolu√ß√£o de um projeto.

**Usando o git add, git status e git commit**

 No terminal, execute os seguintes comandos:
``` python
git status # Comando para verificar o status dos arquivo
git add . # Adicionar todos os arquivos modificados
git add relatorio2.qmd # Adicionar um arquivo espec√≠fico
git status # Verificar se o arquivo foi adicionado corretamente
git commit -m "mensagem explicando a mudan√ßa" # Comando para fazer o commit
```

### 3.3.5 `git push`
O comando `git push` √© usado para enviar os commits feitos localmente para um reposit√≥rio remoto, como o GitHub. Ele efetivamente publica suas altera√ß√µes para que fiquem dispon√≠veis online e possam ser vistas ou utilizadas por outras pessoas.¬†O¬†`git push`¬†pode ser considerado um comando de *"upload"*, enquanto¬†`git fetch`¬†e¬†`git pull`¬†podem ser considerados comandos de *"download"* .
Esse comando deve ser utilizado ap√≥s o `git commit`, pois apenas os commits podem ser enviados ao reposit√≥rio remoto.

**Usando o git push**

Ap√≥s adicionar e fazer commit das altera√ß√µes, use o seguinte comando para enviar ao reposit√≥rio remoto:

``` python
git push origin main 
```
üëâEsse comando envia as altera√ß√µes da  branch principal (main) para o reposit√≥rio remoto chamado origin.

*Origin*¬†√© o nome padr√£o que o Git atribui ao reposit√≥rio remoto ao usar¬†`git clone`. A *branch* principal pode ser chamada de¬†*main*¬†(padr√£o atual adotado desde 2020 por GitHub, GitLab e Bitbucket para promover linguagem mais inclusiva) ou¬†*master*¬†(termo tradicional ainda encontrado em projetos antigos). Ambos funcionam da mesma forma, variando apenas na nomenclatura. Para verificar qual seu reposit√≥rio utiliza, execute¬†`git branch -a`. 

### 3.3.6 `git pull`
O comando¬†`git pull`¬†√© usado para buscar e baixar conte√∫do de reposit√≥rios remotos, atualizando imediatamente o reposit√≥rio local para que os conte√∫dos fiquem iguais. Ele combina automaticamente duas opera√ß√µes:¬†`git fetch`¬†(que baixa as altera√ß√µes do reposit√≥rio remoto) e¬†`git merge`¬†(que integra essas mudan√ßas ao branch local). Esse comando √© essencial para manter seu trabalho atualizado com as contribui√ß√µes de outros colaboradores, sendo um dos principais respons√°veis pela sincroniza√ß√£o de conte√∫do remoto. 

**Usando o git pull:**

``` python
git pull origin main 
```
üëâ Esse comando √© equivalente aos comandos `git fetch` + `git merge`

### 3.3.7 Resumo do Fluxo de Trabalho

O fluxo de trabalho com **Git**, **GitHub** e **Quarto** segue uma sequ√™ncia simples e eficiente:

1. **Criar ou clonar um reposit√≥rio** ‚Üí Come√ßa-se criando um reposit√≥rio local ou clonando um reposit√≥rio existente do GitHub.  
2. **Modificar os arquivos** ‚Üí Edita-se o conte√∫do do projeto (por exemplo, um arquivo `.qmd` no Quarto).  
3. **Verificar o status** (`git status`) ‚Üí Confere-se quais arquivos foram alterados.  
4. **Adicionar mudan√ßas** (`git add`) ‚Üí Seleciona-se os arquivos a serem salvos.  
5. **Salvar com um commit** (`git commit -m "mensagem"`) ‚Üí Registra-se um ponto da vers√£o do projeto.  
6. **Enviar para o GitHub** (`git push`) ‚Üí As altera√ß√µes locais s√£o enviadas para o reposit√≥rio remoto.  
  

Esse processo garante que o projeto esteja **organizado, versionado e dispon√≠vel online**, facilitando a colabora√ß√£o e a atualiza√ß√£o cont√≠nua do trabalho.

## 4.0 Python

Python foi criada por Guido van Rossum em 1991 como uma linguagem de programa√ß√£o de alto n√≠vel e multiparadigma (Artima Developer, *The Making of Python*). Seu c√≥digo-fonte est√° dispon√≠vel sob a licen√ßa GNU General Public License (GPL).

√â uma linguagem poderosa e de f√°cil aprendizado. Sua filosofia de design enfatiza a legibilidade do c√≥digo, permitindo que os programadores expressem conceitos com menos linhas do que seria necess√°rio em linguagens como C++ ou Java.

Um programa em Python segue uma estrutura simples, composta por um **algoritmo**, que √© uma sequ√™ncia de passos definidos para realizar uma tarefa. Esse algoritmo geralmente envolve tr√™s partes:

* **Entrada:** dados fornecidos ao programa;
* **Processamento:** etapas e opera√ß√µes que transformam os dados;
* **Sa√≠da:** o resultado final.

**Exemplo simples de um programa em Python:**

```python
a = 1
b = 2
soma = a + b
print(soma) #3
```
Esse pequeno c√≥digo realiza a soma de dois n√∫meros e exibe o resultado (3) na tela.


### 4.1 Conceitos iniciais de Python

### 4.1.1 Tipos de dados: `int`, `float`, `str`, `bool`

Em Python, os tipos de dados primitivos s√£o fundamentais para a constru√ß√£o de qualquer programa. Entre os principais tipos est√£o os num√©ricos (`int`, `float`, `complex`), as cadeias de texto (`str`) e os valores l√≥gicos (`bool`).

#### Tipos num√©ricos

- `int`: representa n√∫meros inteiros (sem parte decimal), positivos ou negativos.  
- `float`: representa n√∫meros de ponto flutuante (com parte decimal).  
- `complex`: representa n√∫meros complexos, com parte real e imagin√°ria.

```python
# Exemplos
numero_inteiro = 10           # int
numero_decimal = 3.14         # float
numero_complexo = 2 + 3j       # complex

print(type(numero_inteiro))   # <class 'int'>
print(type(numero_decimal))   # <class 'float'>
print(type(numero_complexo))  # <class 'complex'>

```

### Tipo `str` (string)
Representa sequ√™ncias de caracteres (texto). Pode ser definido com aspas simples (`' '`) ou duplas (`" "`):

```python
# Exemplos de strings
nome = "Aila"
mensagem = 'Ol√°, mundo!'

# Opera√ß√µes com strings
print(type(nome))      # Sa√≠da: <class 'str'>
print(nome.upper())    # Sa√≠da: AILA
```
## Tipo `bool` (booleano)

O tipo `bool` representa valores l√≥gicos: `True` (verdadeiro) ou `False` (falso). √â usado principalmente em express√µes condicionais.

```python
maior_de_idade = True
tem_carteira = False

print(type(maior_de_idade))    # <class 'bool'>

# Exemplo de uso em compara√ß√£o
idade = 20
print(idade > 18)  # True
```
## 4.1.2 Vari√°veis e Operadores B√°sicos

### Vari√°veis em Python
Em Python, as vari√°veis s√£o **dinamicamente tipadas**, diferentemente de linguagens *statically typed* onde o tipo √© fixo ap√≥s a declara√ß√£o. Isso significa que uma mesma vari√°vel pode receber valores de tipos diferentes durante sua vida √∫til.

### Operadores em Python
Operadores s√£o s√≠mbolos especiais que executam opera√ß√µes aritm√©ticas ou l√≥gicas. Eles s√£o classificados em:

#### Principais Categorias:
1. **Aritm√©ticos**: Realizam c√°lculos matem√°ticos
   ```python
   print(10 + 3)  # Adi√ß√£o
   print(10 ** 2) # Exponencia√ß√£o
   ```
2. **Atribui√ß√£o**: Atribuem valores a vari√°veis
   ```python
   x = 5
   x += 3  # Equivalente a x = x + 3
   ```

3. **Compara√ß√£o**: Comparam valores
   ```python
   print(5 > 3)   # True
   print(5 == 3)  # False
   ```

4. **L√≥gicos**: Combinam express√µes booleanas
   ```python
   print(True and False)  # False
   print(True or False)   # True
   ```

5. **Identidade**: Verificam se objetos s√£o os mesmos
   ```python
   a = [1,2]
   b = a
   print(a is b)  # True
   ```

6. **Associa√ß√£o**: Verificam se um elemento est√° presente
   ```python
   print('a' in 'Python')  # False
   ```


## 4.1.3 Listas, Tuplas e Dicion√°rios

Python possui quatro estruturas de dados para cole√ß√µes:

**1. Listas**
Cole√ß√£o **ordenada** e **mut√°vel**. Permite itens duplicados.

```python
# Criando uma lista
L = ['V', 'e', 'j', 'a']
print(L)  # ['V', 'e', 'j', 'a']

# Slicing (acesso a partes da lista)
print(L[1:3])  # ['e', 'j']
print(L[-1])   # 'a' (√∫ltimo elemento)

# Modificando a lista
L.append('!')  # Adiciona no final
L[0] = 'v'     # Altera um elemento
```

**2. Tuplas**
Cole√ß√£o **ordenada** e **imut√°vel**. Permite duplicados.

```python
# Criando uma tupla
t = (1, 3, 5)
print(t[1])  # 3

# Tentativa de modifica√ß√£o (gera erro)
# t[0] = 2  # TypeError
```

**3. Sets**
Cole√ß√£o **n√£o-ordenada** e **n√£o-indexada**. N√£o permite duplicados.

```python
s = {"ma√ß√£", "banana", "ma√ß√£"}
print(s)  # {"ma√ß√£", "banana"} (duplicado removido)
```

**4. Dicion√°rios**
Cole√ß√£o **n√£o-ordenada**, **mut√°vel** e **indexada por chaves**.

```python
# Criando um dicion√°rio
d = {"nome": "Maria", "idade": 35}
print(d["nome"])  # Acessando valor
d["idade"] = 36   # Modificando valor
```
## 4.1.4 Estruturas de Controle: if, else, elif

A tomada de decis√£o √© necess√°ria quando queremos executar um c√≥digo apenas se uma determinada condi√ß√£o for satisfeita.

**Diagrama de Fluxo**

Aqui est√° o fluxo das estruturas condicionais:

![Diagrama de fluxo if-elif-else](if%20elif%20else.png)  
*Refer√™ncia: [Python Iluminado](https://pythoniluminado.netlify.app/for-loops)*

**Funcionamento B√°sico**

1. O programa avalia a condi√ß√£o do `if` primeiro
2. Se for falsa, avalia a condi√ß√£o do `elif` (se houver)
3. Se todas forem falsas, executa o `else` (se existir)

**Exemplo 1: Avalia√ß√£o de Notas**

```python
nota = 7.5

if nota >= 9.0:
    print("Excelente! Conceito A")
elif nota >= 7.0:
    print("Bom! Conceito B")
elif nota >= 5.0:
    print("Regular! Conceito C")
else:
    print("Precisa melhorar! Conceito D")
```

## 4.1.5 Estruturas de repeti√ß√£o: `for` e `while`

Em Python, usamos la√ßos de repeti√ß√£o para executar um bloco de c√≥digo v√°rias vezes. Os dois principais la√ßos s√£o `for` e `while`.

**for**  
Usado quando sabemos o n√∫mero de repeti√ß√µes ou queremos percorrer elementos de uma sequ√™ncia (como listas, strings ou intervalos).

**Exemplo:**
```python
# Imprime os n√∫meros de 1 a 5
for i in range(1, 6):
    print(i) 
``` 

**while** 

Usado quando queremos repetir um bloco de c√≥digo enquanto uma condi√ß√£o for verdadeira.
Exemplo:
```python
# Imprime os n√∫meros de 1 a 5
i = 1
while i <= 5:
    print(i)
    i += 1 
``` 
A principal diferen√ßa:

‚Ä¢ `for` √© ideal para percorrer sequ√™ncias.

‚Ä¢ `while` √© ideal para repetir algo at√© que uma condi√ß√£o deixe de ser verdadeira.


## 4.1.6 Fun√ß√µes: defini√ß√£o com `def`, par√¢metros e retorno

Fun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis que executam uma tarefa espec√≠fica. Em Python, usamos a palavra-chave `def` para definir uma fun√ß√£o.

```python
# Define uma fun√ß√£o que soma dois n√∫meros
def somar(a, b):
    return a + b

# Chamada da fun√ß√£o
resultado = somar(3, 5)
print(resultado)
``` 
## 4.1.7 Importa√ß√£o de bibliotecas com import
Bibliotecas s√£o cole√ß√µes de fun√ß√µes e recursos j√° prontos. Com import, podemos utiliz√°-las no nosso programa.
```python
# Importando a biblioteca math
import math

# Usando uma fun√ß√£o da biblioteca math
print(math.sqrt(25))  # imprime a raiz quadrada de 25
``` 
### 4.2 Boas pr√°ticas: coment√°rios, nomes de vari√°veis e indenta√ß√£o

Seguir boas pr√°ticas de codifica√ß√£o torna o c√≥digo mais claro, leg√≠vel e f√°cil de manter. Em Python, algumas pr√°ticas recomendadas incluem:

- **Coment√°rios:** use `#` para explicar trechos importantes do c√≥digo. Isso ajuda outras pessoas (e voc√™ mesmo no futuro) a entender o que est√° acontecendo.
- **Nomes de vari√°veis:** utilize nomes claros e descritivos que indiquem o prop√≥sito da vari√°vel. Por exemplo, `media_alunos` √© mais informativo do que `x`.
- **Indenta√ß√£o:** Python exige indenta√ß√£o correta para definir blocos de c√≥digo. A recomenda√ß√£o √© usar 4 espa√ßos por n√≠vel.

### 4.3.1 O que √© o `pip`

O `pip` (Python Installer Package) √© uma ferramenta que facilita a instala√ß√£o de bibliotecas que n√£o est√£o inclu√≠das na instala√ß√£o padr√£o do Python. Com ele, podemos instalar, atualizar e remover pacotes facilmente.

**Como instalar pacotes com `pip install`**

Para instalar uma biblioteca, basta usar o seguinte comando no terminal:

```python
pip install nome-do-pacote
pip install pandas #Exemplo
``` 
```python
pip uninstall nome-do-pacote  # Remover um pacote
pip list # Listar pacotes instalados: 
pip install --upgrade nome-do-pacote  # Atualizar um pacote: 
pip show nome-do-pacote  # Visualizar informa√ß√µes de um pacote: 
``` 
#### 4.3.3 Exemplos de bibliotecas populares

Abaixo est√£o alguns pacotes muito utilizados por quem trabalha com an√°lise de dados, visualiza√ß√£o e requisi√ß√µes web:

- `pandas`: manipula√ß√£o e an√°lise de dados em tabelas.
- `numpy`: suporte a vetores, matrizes e c√°lculos num√©ricos eficientes.
- `matplotlib`: cria√ß√£o de gr√°ficos e visualiza√ß√µes.
- `requests`: envio de requisi√ß√µes HTTP de forma simples.

**Exemplo**:
```python
# Primeiro instalar a biblioteca (executar no terminal)
pip install pandas 
pip install  numpy
``` 
**Importa√ß√µes com aliases (apelidos) convencionais**
```python
import pandas as pd       # pd √© o alias padr√£o para pandas
import numpy as np        # np √© o alias padr√£o para numpy
``` 
## REFER√äNCIAS

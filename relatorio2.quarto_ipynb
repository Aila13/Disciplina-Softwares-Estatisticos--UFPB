{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format: pdf\n",
        "lang: pt\n",
        "geometry: \n",
        "  - left=1.25in\n",
        "  - right=1.25in\n",
        "  - top=1in\n",
        "  - bottom=1in\n",
        "fig-cap-location: top\n",
        "echo: false\n",
        "warning: false\n",
        "bibliography: referencias.bib\n",
        "---\n",
        "\n",
        "::: hidden\n",
        "\\pagestyle{empty}\n",
        "\\thispagestyle{empty}\n",
        ":::\n",
        "\n",
        "![](%22ufpb.png%22){height=\"100\" fig-align=\"center\"}\n",
        "\n",
        "\\begin{center}\n",
        "UNIVERSIDADE FEDERAL DA PARAÍBA\n",
        "\n",
        "CENTRO DE CIÊNCIAS EXATAS E DA NATUREZA\n",
        "\n",
        "DEPARTAMENTO DE ESTATÍSTICA\n",
        "\n",
        "DISCIPLINA: INTRODUÇÃO AOS SOFTWARES ESTATÍSTICOS\n",
        "\\end{center}\n",
        "\n",
        "\\vfill\n",
        "\n",
        "\\begin{center}\n",
        "\\Large{Fluxo de Trabalho: Integrando Git, GitHub e Quarto com Introdução à Programação em Python}\n",
        "\\end{center}\n",
        "\n",
        "\\vfill\n",
        "\n",
        "\n",
        "\\begin{center}\n",
        "Aila Soares Ferreira \\\\\n",
        "matrícula: 20240045022\n",
        "\\end{center}\n",
        "\n",
        "\n",
        "\n",
        "\\vfill\n",
        "\n",
        "\\begin{center}\n",
        "João Pessoa - PB\n",
        "\n",
        "Julho 2025\n",
        "\\end{center}\n",
        "\n",
        "\\newpage\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## 1.0 INTRODUÇÃO\n",
        "\n",
        "\n",
        "Com os avanços do *Big Data* - termo que descreve grandes volumes de dados de alta velocidade, complexos e variáveis, que passaram a exigir técnicas avançadas para captura, armazenamento, distribuição, gerenciamento e análise de informações [@techamerica2012] - observamos que o valor desses dados só é plenamente aproveitado quando utilizado para tomada de decisões estratégicas. Para isso, as organizações precisam de processos eficientes que transformem dados brutos, muitas vezes dispersos e dinâmicos, em *insights* significativos [@gandomi2015].\n",
        "\n",
        "Além disso, conforme um projeto avança, arquivos são constantemente modificados e compartilhados entre colaboradores, exigindo gestão adequada para garantir integridade e acessibilidade. O gerenciamento de dados envolve não apenas armazenamento, mas também preparação e recuperação eficiente para análise [@bryan2017].\n",
        "\n",
        "Nesse contexto, este trabalho foi desenvolvido como requisito da disciplina, Introdução aos Softwares Estatísticos, com o objetivo de integrar ferramentas fundamentais para a prática atual da estatística, como:\n",
        "\n",
        "1. **Git e GitHub** - Sistema de controle de versões distribuído e plataforma de hospedagem\n",
        "2. **Quarto** - Ferramenta para criação de relatórios dinâmicos e reprodutíveis\n",
        "3. **Python** - Linguagem de programação para análise de dados\n",
        "\n",
        "## 2.0 Controle de Versão\n",
        "\n",
        "Antes de falarmos sobre Git e GitHub, precisamos entender o conceito de **controle de versão**. Esse sistema registra todas as mudanças em arquivos ao longo do tempo, permitindo que você volte a versões anteriores quando necessário. Ele guarda todo o histórico de alterações em um banco de dados. Se acontecer algum erro, é possível voltar atrás e comparar diferentes versões do projeto [@bryan2020].\n",
        "\n",
        "### 2.2 Benefícios do Controle de Versão\n",
        "\n",
        "Os principais benefícios são:\n",
        "\n",
        "1. **Histórico completo** de todas as mudanças:\n",
        "   - Todas as alterações feitas por diferentes pessoas\n",
        "   - Criação e exclusão de arquivos\n",
        "   - Mudanças no conteúdo\n",
        "\n",
        "2. **Ramificação (branching) e junção (merging)**:\n",
        "   - Trabalhar em partes separadas do projeto\n",
        "   - Criar \"ramos\" para desenvolver coisas novas\n",
        "   - Juntar tudo depois no projeto principal\n",
        "\n",
        "3. **Rastreamento**:\n",
        "   - Saber quem fez cada mudança\n",
        "   - Quando e por que foi feita\n",
        "   - Comparar versões diferentes\n",
        "\n",
        "Os sistemas de controle de versão passaram por significativas melhorias nas últimas décadas. Dentre as soluções atualmente disponíveis, o Git se consolida como uma das ferramentas mais adotadas para controle de versão [@chacon2014; @bryan2020].\n",
        "\n",
        "\n",
        "## 3.0 Git e GitHub\n",
        "\n",
        "O Git é um sistema de controle de versão distribuído, criado por Linus Torvalds em 2005 com o objetivo de gerenciar o desenvolvimento colaborativo do kernel do Linux. Sua arquitetura permite que múltiplos desenvolvedores trabalhem simultaneamente em um projeto, mantendo um histórico completo e seguro das alterações realizadas.\n",
        "\n",
        "Com o passar dos anos, o Git passou a ser amplamente adotado em diferentes áreas, incluindo a ciência de dados, onde tem se mostrado uma ferramenta eficiente no gerenciamento de projetos complexos. Esses projetos frequentemente envolvem uma coleção heterogênea de arquivos, como scripts de análise computacional, relatórios dinâmicos, bases de dados e visualizações gráficas [@bryan2017] [@chacon2014].\n",
        "\n",
        "### 3.1 Fluxo de Trabalho Básico do Git\n",
        "\n",
        "O fluxo de trabalho básico com Git pode ser resumido nas seguintes etapas:\n",
        "\n",
        "1. **Modificação**  \n",
        "   ◦ Edição de arquivos na árvore de trabalho  \n",
        "   ◦ Criação, remoção ou alteração de documentos  \n",
        "\n",
        "2. **Preparação**  \n",
        "   ◦ Seleção das mudanças que devem ser incluídas no próximo commit (`git add`)  \n",
        "   ◦ Organização lógica das alterações  \n",
        "\n",
        "3. **Consolidação**  \n",
        "   ◦ Registro definitivo das mudanças com uma mensagem descritiva (`git commit`)  \n",
        "   ◦ Criação de pontos de restauração no histórico do projeto  \n",
        "\n",
        "4. **Sincronização**  \n",
        "   ◦ Integração com repositórios remotos por meio dos comandos `git push` e `git pull`  \n",
        "   ◦ Garantia de que todas as versões do projeto permaneçam consistentes entre os colaboradores  \n",
        "\n",
        "### 3.2 GitHub\n",
        "\n",
        "O GitHub é uma plataforma de hospedagem de código-fonte que complementa o uso do Git, fornecendo uma interface gráfica baseada na web e recursos avançados para o gerenciamento de repositórios Git. Enquanto o Git é uma ferramenta local utilizada para registrar e controlar as alterações em arquivos, o GitHub funciona como um serviço remoto, permitindo que esses repositórios sejam armazenados, sincronizados e compartilhados pela internet.\n",
        "\n",
        "Muitas operações podem ser feitas inteiramente no Github, como exemplo: **Visualizar e editar arquivos; revisar e gerenciar solicitações de mudanças; e Controlar permissões de acesso aos projetos**.\n",
        "\n",
        "## 3.3 Comandos básicos: `git init`, `git add`, `git clone`,  `git commit`, `git push`, `git pull`\n",
        "\n",
        "### 3.3.1 `git init`\n",
        "\n",
        "O comando `git init` cria um novo repositório do Git. Ele é utilizado para transformar uma pasta comum do computador em um repositório Git, ou seja, um ambiente com controle de versão. Isso permite acompanhar todas as alterações feitas no projeto ao longo do tempo.\n",
        "\n",
        "A seguir, apresentamos um exemplo prático com base no desenvolvimento deste próprio relatório.\n",
        "\n",
        "### Exemplo prático: iniciando o Git em um projeto Quarto\n",
        "\n",
        "*Etapas*\n",
        "\n",
        "1. No Positron criar uma nova pasta\n",
        "\n",
        "2. Dentro da pasta, criar um novo arquivo chamado `relatorio2.qmd`.\n",
        "\n",
        "3. A seguir, abri o terminal navegar na pasta do projeto com o comando *c*\n",
        "\n",
        "**Transformando em repositório Git**\n",
        "\n",
        "No terminal, execute os seguintes comandos:\n",
        "``` python\n",
        "git init #Comando para iniciar repositório\n",
        "git status #Comando para verificar o status dos arquivo\n",
        "```\n",
        "### 3.3.2 `git add`\n",
        "O comando `git add` prepara arquivos para serem incluídos no próximo *commit*. Ou seja, ele diz ao Git quais arquivos você quer salvar no histórico de versões. Você deve usar sempre que, criar um arquivo, modificar ou deletar algum arquivo.\n",
        "\n",
        "**Usando o git add**\n",
        "\n",
        "No terminal, execute os seguintes comandos:\n",
        "``` python\n",
        "git add . # Adicionar todos os arquivos modificados. \n",
        "          # O ponto . significa  “tudo no diretório atual e subpastas\"\n",
        "git add relatorio2.qmd #Adicionar um arquivo específico\n",
        "```\n",
        "\n",
        "Depois de adicionar, os arquivos ficam em um estado chamado **\"staged\"** (preparado). Eles só serão salvos de verdade no Git quando você fizer o commit:\n",
        "`git commit -m` \"mensagem explicando a mudança\".\n",
        "\n",
        "### 3.3.3 `git clone` \n",
        "O comando `git clone` é usado para copiar um repositório Git existente para o seu computador. Ele cria uma cópia completa do projeto, incluindo todos os arquivos, histórico de versões e estrutura de diretórios.\n",
        "Você pode clonar repositórios que estejam hospedados localmente ou em servidores remotos, como o GitHub. Esse comando é geralmente o primeiro passo para começar a colaborar em um projeto existente.\n",
        "\n",
        "**Usando o git clone**\n",
        "\n",
        "No terminal, execute o seguinte comando:\n",
        "``` python\n",
        "git clone https://github.com/usuario/nome-do-repositorio.git\n",
        "```\n",
        "👉Esse comando irá criar uma pasta chamada nome-do-repositorio com todos os arquivos e histórico do repositório remoto.\n",
        "\n",
        "### 3.3.4 `git commit` \n",
        "O comando `git commit`  registra um instantâneo das alterações preparadas no projeto. Esse instantâneo representa uma versão segura do projeto naquele momento, que será armazenada no histórico do repositório. \n",
        "\n",
        "Antes de executar o `git commit`, é necessário utilizar o comando `git add`, que serve para selecionar as alterações que serão incluídas nesse instantâneo. Assim, `git add` prepara os arquivos, e `git commit` os salva definitivamente no repositório local.\n",
        "\n",
        "Além disso, o comando `git status` pode ser usado a qualquer momento para verificar quais arquivos foram modificados, quais já foram preparados com `git add`  e quais ainda não foram incluídos no próximo commit.\n",
        "\n",
        "Esses três comandos — `git add`, `git status` e `git commit` — são frequentemente utilizados em conjunto e formam o fluxo básico de trabalho com Git, permitindo um controle eficiente sobre a evolução de um projeto.\n",
        "\n",
        "**Usando o git add, git status e git commit**\n",
        "\n",
        " No terminal, execute os seguintes comandos:\n",
        "``` python\n",
        "git status # Comando para verificar o status dos arquivo\n",
        "git add . # Adicionar todos os arquivos modificados\n",
        "git add relatorio2.qmd # Adicionar um arquivo específico\n",
        "git status # Verificar se o arquivo foi adicionado corretamente\n",
        "git commit -m \"mensagem explicando a mudança\" # Comando para fazer o commit\n",
        "```\n",
        "\n",
        "### 3.3.5 `git push`\n",
        "O comando `git push` é usado para enviar os commits feitos localmente para um repositório remoto, como o GitHub. Ele efetivamente publica suas alterações para que fiquem disponíveis online e possam ser vistas ou utilizadas por outras pessoas. O `git push` pode ser considerado um comando de *\"upload\"*, enquanto `git fetch` e `git pull` podem ser considerados comandos de *\"download\"* .\n",
        "Esse comando deve ser utilizado após o `git commit`, pois apenas os commits podem ser enviados ao repositório remoto.\n",
        "\n",
        "**Usando o git push**\n",
        "\n",
        "Após adicionar e fazer commit das alterações, use o seguinte comando para enviar ao repositório remoto:\n",
        "\n",
        "``` python\n",
        "git push origin main \n",
        "```\n",
        "👉Esse comando envia as alterações da  branch principal (main) para o repositório remoto chamado origin.\n",
        "\n",
        "*Origin* é o nome padrão que o Git atribui ao repositório remoto ao usar `git clone`. A *branch* principal pode ser chamada de *main* (padrão atual adotado desde 2020 por GitHub, GitLab e Bitbucket para promover linguagem mais inclusiva) ou *master* (termo tradicional ainda encontrado em projetos antigos). Ambos funcionam da mesma forma, variando apenas na nomenclatura. Para verificar qual seu repositório utiliza, execute `git branch -a`. \n",
        "\n",
        "### 3.3.6 `git pull`\n",
        "O comando `git pull` é usado para buscar e baixar conteúdo de repositórios remotos, atualizando imediatamente o repositório local para que os conteúdos fiquem iguais. Ele combina automaticamente duas operações: `git fetch` (que baixa as alterações do repositório remoto) e `git merge` (que integra essas mudanças ao branch local). Esse comando é essencial para manter seu trabalho atualizado com as contribuições de outros colaboradores, sendo um dos principais responsáveis pela sincronização de conteúdo remoto. \n",
        "\n",
        "**Usando o git pull:**\n",
        "\n",
        "``` python\n",
        "git pull origin main \n",
        "```\n",
        "👉 Esse comando é equivalente aos comandos `git fetch` + `git merge`\n",
        "\n",
        "### 3.3.7 Resumo do Fluxo de Trabalho\n",
        "\n",
        "O fluxo de trabalho com **Git**, **GitHub** e **Quarto** segue uma sequência simples e eficiente:\n",
        "\n",
        "1. **Criar ou clonar um repositório** → Começa-se criando um repositório local ou clonando um repositório existente do GitHub.  \n",
        "2. **Modificar os arquivos** → Edita-se o conteúdo do projeto (por exemplo, um arquivo `.qmd` no Quarto).  \n",
        "3. **Verificar o status** (`git status`) → Confere-se quais arquivos foram alterados.  \n",
        "4. **Adicionar mudanças** (`git add`) → Seleciona-se os arquivos a serem salvos.  \n",
        "5. **Salvar com um commit** (`git commit -m \"mensagem\"`) → Registra-se um ponto da versão do projeto.  \n",
        "6. **Enviar para o GitHub** (`git push`) → As alterações locais são enviadas para o repositório remoto.  \n",
        "  \n",
        "\n",
        "Esse processo garante que o projeto esteja **organizado, versionado e disponível online**, facilitando a colaboração e a atualização contínua do trabalho.\n",
        "\n",
        "## 4.0 Python\n",
        "\n",
        "Python foi criada por Guido van Rossum em 1991 como uma linguagem de programação de alto nível e multiparadigma (Artima Developer, *The Making of Python*). Seu código-fonte está disponível sob a licença GNU General Public License (GPL).\n",
        "\n",
        "É uma linguagem poderosa e de fácil aprendizado. Sua filosofia de design enfatiza a legibilidade do código, permitindo que os programadores expressem conceitos com menos linhas do que seria necessário em linguagens como C++ ou Java.\n",
        "\n",
        "Um programa em Python segue uma estrutura simples, composta por um **algoritmo**, que é uma sequência de passos definidos para realizar uma tarefa. Esse algoritmo geralmente envolve três partes:\n",
        "\n",
        "* **Entrada:** dados fornecidos ao programa;\n",
        "* **Processamento:** etapas e operações que transformam os dados;\n",
        "* **Saída:** o resultado final.\n",
        "\n",
        "**Exemplo simples de um programa em Python:**\n",
        "\n",
        "```python\n",
        "a = 1\n",
        "b = 2\n",
        "soma = a + b\n",
        "print(soma) #3\n",
        "```\n",
        "Esse pequeno código realiza a soma de dois números e exibe o resultado (3) na tela.\n",
        "\n",
        "\n",
        "### 4.1 Conceitos iniciais de Python\n",
        "\n",
        "### 4.1.1 Tipos de dados: `int`, `float`, `str`, `bool`\n",
        "\n",
        "Em Python, os tipos de dados primitivos são fundamentais para a construção de qualquer programa. Entre os principais tipos estão os numéricos (`int`, `float`, `complex`), as cadeias de texto (`str`) e os valores lógicos (`bool`).\n",
        "\n",
        "#### Tipos numéricos\n",
        "\n",
        "- `int`: representa números inteiros (sem parte decimal), positivos ou negativos.  \n",
        "- `float`: representa números de ponto flutuante (com parte decimal).  \n",
        "- `complex`: representa números complexos, com parte real e imaginária.\n",
        "\n",
        "```python\n",
        "# Exemplos\n",
        "numero_inteiro = 10           # int\n",
        "numero_decimal = 3.14         # float\n",
        "numero_complexo = 2 + 3j       # complex\n",
        "\n",
        "print(type(numero_inteiro))   # <class 'int'>\n",
        "print(type(numero_decimal))   # <class 'float'>\n",
        "print(type(numero_complexo))  # <class 'complex'>\n",
        "\n",
        "```\n",
        "\n",
        "### Tipo `str` (string)\n",
        "Representa sequências de caracteres (texto). Pode ser definido com aspas simples (`' '`) ou duplas (`\" \"`):"
      ],
      "id": "c05ffef0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Exemplos de strings\n",
        "nome = \"Aila\"\n",
        "mensagem = 'Olá, mundo!'\n",
        "\n",
        "# Operações com strings\n",
        "print(type(nome))      # Saída: <class 'str'>\n",
        "print(nome.upper())    # Saída: AILA"
      ],
      "id": "4bce0f5d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Tipo `bool` (booleano)\n",
        "\n",
        "O tipo `bool` representa valores lógicos: `True` (verdadeiro) ou `False` (falso). É usado principalmente em expressões condicionais."
      ],
      "id": "b64d74e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "maior_de_idade = True\n",
        "tem_carteira = False\n",
        "\n",
        "print(type(maior_de_idade))    # <class 'bool'>\n",
        "\n",
        "# Exemplo de uso em comparação\n",
        "idade = 20\n",
        "print(idade > 18)  # True"
      ],
      "id": "a5683cd8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## REFERÊNCIAS"
      ],
      "id": "d78582d4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Aila Ferreira\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}